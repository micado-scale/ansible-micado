---
- name: '(MiCADO Core) Create directories'
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: 0775
    state: directory
  loop:
  - { path: '/var/lib/micado/alertmanager/config/', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/alertmanager/data/', owner: 'nobody', group: 'nogroup' }
  - { path: '/var/lib/micado/grafana/config/', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/grafana/data/dashboards', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/grafana/provisioning/datasources', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/grafana/provisioning/dashboards', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/grafana/provisioning/notifiers', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/optimizer/config', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/policykeeper/config/', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/prometheus/config/', owner: 'root', group: 'root' }
  - { path: '/var/lib/micado/prometheus/data/', owner: 'nobody', group: 'nogroup' }
  - { path: '/var/lib/micado/toscasubmitter/system', owner: 'root', group: 'root' }
  # Logs
  - { path: '/var/log/micado/alertmanager/', owner: 'root', group: 'root' }
  - { path: '/var/log/micado/dashboard/',owner: 'root', group: 'root' }
  - { path: '/var/log/micado/grafana/', owner: 'root', group: 'root' }
  - { path: '/var/log/micado/optimizer/', owner: 'root', group: 'root' }
  - { path: '/var/log/micado/policykeeper/', owner: 'root', group: 'root' }
  - { path: '/var/log/micado/prometheus/', owner: 'root', group: 'root' }
  - { path: '/var/log/micado/toscasubmitter/', owner: 'root', group: 'root' }

- name: '(MiCADO Core) Copy config files'
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
  - { src: 'alertmanager/config.yml', dest: '/var/lib/micado/alertmanager/config/alertmanager.yml', mode: '0644'}
  - { src: 'grafana/grafana.ini', dest: '/var/lib/micado/grafana/config/grafana.ini', mode: '0644'}
  - { src: 'grafana/provisioning-dashboards-provider.yaml', dest: '/var/lib/micado/grafana/provisioning/dashboards/provider.yaml', mode: '0644'}
  - { src: 'grafana/provisioning-datasources-prometheus.yaml', dest: '/var/lib/micado/grafana/provisioning/datasources/prometheus.yaml', mode: '0644'}
  - { src: 'iptables/iptables.service', dest: '/etc/systemd/system/iptables.service', mode: '0644'}
  - { src: 'iptables/ip6tables.service', dest: '/etc/systemd/system/ip6tables.service', mode: '0644'}
  - { src: 'micado/micado.service', dest: '/etc/systemd/system/micado.service', mode: '0644'}
  - { src: 'micado/micadoctl', dest: '/usr/local/bin/micadoctl', mode: '0755'}
  - { src: 'optimizer/optimizer_config.yaml', dest: '/var/lib/micado/optimizer/config/optimizer_config.yaml', mode: '0644'}
  - { src: 'policykeeper/policykeeper_config.yaml', dest: '/var/lib/micado/policykeeper/config/policykeeper_config.yaml', mode: '0644'}
  - { src: 'prometheus/prometheus.yml', dest: '/var/lib/micado/prometheus/config/prometheus.yml', mode: '0644'}

- name: "(MiCADO Core) copy log README file"
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
  - { content: "Check the logs by the following command:\nkubectl -n micado-system logs $(kubectl -n micado-system get pod | grep alertmanager | col1)\n",
      dest: '/var/log/micado/alertmanager/README'}
  - { content: "Check the logs by the following command:\nkubectl -n micado-system logs $(kubectl -n micado-system get pod | grep micado-dashboard | col1)\n",
      dest: '/var/log/micado/dashboard/README'}
  - { content: "Check the logs by the following command:\nkubectl -n micado-system logs $(kubectl -n micado-system get pod | grep prometheus | col1)\n",
      dest: '/var/log/micado/prometheus/README'}

- name: '(MiCADO Core) Downloading docker images'
  docker_image:
      name: "{{ item }}"
      source: pull
  loop:
  - "{{ docker_images.prometheus }}"
  - "{{ docker_images.alertmanager }}"
  - "{{ docker_images.grafana }}"
  - "{{ docker_images.policykeeper }}"
  - "{{ docker_images.dashboard }}"
  - "{{ docker_images.toscasubmitter }}"