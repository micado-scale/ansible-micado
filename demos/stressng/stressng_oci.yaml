tosca_definitions_version: tosca_simple_yaml_1_2

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

description: ADT for stressng on OCI

topology_template:
  node_templates:
    stressng:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: lorel/docker-stress-ng
        args: ['--cpu', '0', '--cpu-method', 'pi', '-l', '20']
        resources:
          requests:
            cpu: "900m"

    worker-node:
      type: tosca.nodes.MiCADO.OCI.Compute
      properties:
        region: <REGION_NAME> (e.g. uk-london-1)
        availability_domain: <AVAILABILITY_DOMAIN> (e.g. lVvK:UK-LONDON-1-AD-1)
        compartment_id: <COMPARTMENT_OCID> (e.g ocid1.tenancy.oc1..aaa)
        shape: <VM_TYPE_NAME> (e.g. VM.Standard.E2.1)
        source_id: <VM_IMAGE_OCID> (e.g ocid1.image.oc1.uk-london-1.aaa)
        subnet_id: <SUBNET_OCID> (e.g ocid1.subnet.oc1.uk-london-1.aaa)
        network_security_group: <NETWORK_SECURITY_GROUP_OCID> (e.g ocid1.networksecuritygroup.oc1.uk-london-1.aaa)
        ssh_keys: <SSH_KEY_NAME> (e.g. ssh-rsa AAAB3N...)
        context:
          insert: true
          cloud_config: |
            runcmd:
            - iptables -D INPUT -j REJECT --reject-with icmp-host-prohibited
            - iptables -D FORWARD -j REJECT --reject-with icmp-host-prohibited
      interfaces:
        Terraform:
          create:
      
  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: true
          enable_node_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng
        targets: [ worker-node ]
        properties:
          constants:
            NODE_NAME: 'worker-node'
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.stressng
        targets: [ stressng ]
        properties:
          constants:
            SERVICE_NAME: 'stressng'
            SERVICE_FULL_NAME: 'stressng'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{image!~"docker.io/rancher.*", pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))*100 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{image!~"docker.io/rancher.*", pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))*100 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{instance=~"{{ NODE_NAME }}.*", id="/"}[60s]))*100 > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{instance=~"{{ NODE_NAME }}.*", id="/"}[60s]))*100 < {{NODE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
