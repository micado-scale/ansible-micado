tosca_definitions_version: tosca_simple_yaml_1_2

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

description: ADT for stressng on CloudSigma

topology_template:
  node_templates:
    stressng:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: lorel/docker-stress-ng
        args: ['--cpu', '0', '--cpu-method', 'pi', '-l', '20']
        resources:
          requests:
            cpu: "900m"

    worker-node:
      type: tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small
      properties:
        # This node type creates a 2GHz/2GB VM by default, uncomment & edit the below lines to change
        #num_cpus: 2000
        #mem_size: 2147483648
        vnc_password: secret
        libdrive_id: ADD_YOUR_LIBRARY_DRIVE_ID_HERE (e.g. 0d2dc532-39f5-4db3-9a15-ff440a7f6ff0)
        public_key_id: ADD_YOUR_PUBLIC_KEY_ID_HERE (e.g. d7c0f1ee-40df-4029-8d95-ec35b34dae1e)
        nics:
        - firewall_policy: ADD_YOUR_FIREWALL_POLICY_ID_HERE (e.g. fd97e326-83c8-44d8-90f7-0a19110f3c9d)
          ip_v4_conf:
            conf: dhcp
        # This node type points to Zurich by default, uncomment & edit the below line to change region
        #endpoint: https://gva.cloudsigma.com/api/2.0

  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: true
          enable_node_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng
        targets: [ worker-node ]
        properties:
          constants:
            NODE_NAME: 'worker-node'
            NODE_TH_MAX: '60'
            NODE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.stressng
        targets: [ stressng ]
        properties:
          constants:
            SERVICE_NAME: 'stressng'
            SERVICE_FULL_NAME: 'stressng'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{image!~"docker.io/rancher.*", pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))*100 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{image!~"docker.io/rancher.*", pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))*100 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{instance=~"{{ NODE_NAME }}.*", id="/"}[60s]))*100 > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{instance=~"{{ NODE_NAME }}.*", id="/"}[60s]))*100 < {{NODE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
