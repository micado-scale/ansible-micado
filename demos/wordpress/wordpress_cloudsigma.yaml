tosca_definitions_version: tosca_simple_yaml_1_2

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

description: ADT for WordPress on CloudSigma

dsl_definitions:
  compute_properties: &compute_properties
    vnc_password: ADD_VNC_PASSWORD_HERE (e.g. secret)
    libdrive_id: ADD_YOUR_LIBRARY_DRIVE_ID_HERE (e.g. 0d2dc532-39f5-4db3-9a15-ff440a7f6ff0)
    public_key_id: ADD_YOUR_PUBLIC_KEY_ID_HERE (e.g. d7c0f1ee-40df-4029-8d95-ec35b34dae1e)
    nics:
    - firewall_policy: ADD_YOUR_FIREWALL_POLICY_ID_HERE (e.g. fd97e326-83c8-44d8-90f7-0a19110f3c9d)
      ip_v4_conf:
        conf: dhcp
    # Overwrite the endpoint property here if required (example: Geneva)
    #endpoint: https://gva.cloudsigma.com/api/2.0

topology_template:
  node_templates:
    nfs-server-pod:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: itsthenetwork/nfs-server-ubuntu
        securityContext:
          privileged: True
        args: ['/exports']
        ports:
          - port: 2049
            clusterIP: 10.96.0.240
          - port: 111
            protocol: UDP
        labels:
          tier: nfs
      requirements:
      - host: static-worker

    wordpress-mysql:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: admin
        ports:
        - target: 3306
          clusterIP: 'None'
        - containerPort: 3306
        labels:
          tier: mysql
      requirements:
      - host: static-worker
      - volume:
          node: nfs-volume
          relationship:
            type: tosca.relationships.AttachesTo
            properties:
              location: /var/lib/mysql

    nfs-volume:
      type: tosca.nodes.MiCADO.Container.Volume.NFS
      properties:
        server: 10.96.0.240
        path: /

    wordpress:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: wordpress:5.0.3-apache
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          value: admin
        resources:
          requests:
            cpu: "900m"
        ports:
        - port: 80
          nodePort: 30010
        - containerPort: 80
        labels:
          tier: frontend
      requirements:
        - host: scaling-worker
        - volume:
            node: nfs-volume
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/www/html

    # These compute nodes are predefined in micado-types.yaml which sets defaults for
    # size, orchestrator, capabilities, and adds NFS server dependencies to cloud-init
    scaling-worker:
        type: tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small.NFS
        properties: *compute_properties
        
    static-worker:
        type: tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small.NFS
        properties: *compute_properties

  outputs:
    ports:
      value: { get_attribute: [ wordpress, port ]}

  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.Net.wordpress
        targets: [ scaling-worker ]
        properties:
          constants:
            NODE_NAME: 'scaling-worker'
          min_instances: 1
          max_instances: 3
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.Net.wordpress
        targets: [ wordpress ]
        properties:
          constants:
            SERVICE_NAME: 'wordpress'
            SERVICE_FULL_NAME: 'wordpress'
            SERVICE_TH_MAX: '100'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.Net.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container Net
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container Net
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.Net.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for node Net
        default:
        - alert: node_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{instance="{{ NODE_NAME }}"}[60s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{instance="{{ NODE_NAME }}"}[60s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM Net
        default: |
          if len(m_nodes) <= m_node_count and 0 < m_time_since_node_count_changed > 180:
            if node_overloaded:
              m_node_count+=1
            elif node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true