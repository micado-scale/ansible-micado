tosca_definitions_version: tosca_simple_yaml_1_2

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

description: ADT for WordPress on CloudBroker

dsl_definitions:
  compute_properties: &compute_properties
    deployment_id: ADD_YOUR_ID_HERE (e.g. e7491688-599d-4344-95ef-aff79a60890e)
    instance_type_id: ADD_YOUR_ID_HERE (e.g. 9b2028be-9287-4bf6-bbfe-bcbc92f065c0)
    key_pair_id: ADD_YOUR_ID_HERE (e.g. d865f75f-d32b-4444-9fbb-3332bcedeb75)
    opened_port: ADD_YOUR_PORTS_HERE (e.g. '22,2377,7946,8300,8301,8302,8500,8600,9100,9200,4789')
    context:
      insert: true
      cloud_config: |
        runcmd:
        - apt-get install -y nfs-kernel-server nfs-common

  occopus_properties: &occopus_properties
    endpoint: ADD_YOUR_ENDPOINT (e.g https://cola-prototype.cloudbroker.com)

topology_template:
  node_templates:
    nfs-server-pod:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: itsthenetwork/nfs-server-ubuntu
        securityContext:
          privileged: True
        args: ['/exports']
        ports:
          - port: 2049
            clusterIP: 10.96.0.240
          - port: 111
            protocol: UDP
        labels:
          tier: nfs
      requirements:
      - host: static-worker

    wordpress-mysql:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: admin
        ports:
        - target: 3306
          clusterIP: 'None'
        - containerPort: 3306
        labels:
          tier: mysql
      requirements:
      - host: static-worker
      - volume:
          node: nfs-volume
          relationship:
            type: tosca.relationships.AttachesTo
            properties:
              location: /var/lib/mysql

    nfs-volume:
      type: tosca.nodes.MiCADO.Container.Volume.NFS
      properties:
        server: 10.96.0.240
        path: /

    wordpress:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: wordpress:5.0.3-apache
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          value: admin
        resources:
          requests:
            cpu: "900m"
        ports:
        - port: 80
          nodePort: 30010
        - containerPort: 80
        labels:
          tier: frontend
      requirements:
        - host: scaling-worker
        - volume:
            node: nfs-volume
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /var/www/html

    scaling-worker:
      type: tosca.nodes.MiCADO.CloudBroker.Compute
      properties: *compute_properties
      interfaces:
        Occopus:
          create:
            inputs: *occopus_properties
      
    static-worker:
      type: tosca.nodes.MiCADO.CloudBroker.Compute
      properties: *compute_properties
      interfaces:
        Occopus:
          create:
            inputs: *occopus_properties
      
  outputs:
    ports:
      value: { get_attribute: [ wordpress, port ]}

  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.Net.wordpress
        targets: [ scaling-worker ]
        properties:
          constants:
            NODE_NAME: 'scaling-worker'
          min_instances: 1
          max_instances: 3
    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.Net.wordpress
        targets: [ wordpress ]
        properties:
          constants:
            SERVICE_NAME: 'wordpress'
            SERVICE_FULL_NAME: 'wordpress'
            SERVICE_TH_MAX: '100'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 3

policy_types:
  tosca.policies.Scaling.MiCADO.Container.Net.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container Net
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{pod=~"{{SERVICE_FULL_NAME}}.*"}[60s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container Net
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.Net.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for node Net
        default:
        - alert: node_overloaded
          expr: 'avg(rate(container_network_receive_bytes_total{instance="{{ NODE_NAME }}"}[60s]))/1000 > {{SERVICE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: 'avg(rate(container_network_receive_bytes_total{instance="{{ NODE_NAME }}"}[60s]))/1000 < {{SERVICE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM Net
        default: |
          if len(m_nodes) <= m_node_count and 0 < m_time_since_node_count_changed > 180:
            if node_overloaded:
              m_node_count+=1
            elif node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true