---
- name: (Docker login) Checking the existence of Docker credentials
  stat: path={{ docker_cred_path }}
  become: false
  delegate_to: localhost
  register: f
  changed_when: False

- name: (Docker login) Get Docker credentials
  include_vars: "{{ docker_cred_path }}"
  when: f.stat.exists

- name: (Docker login) Create Docker Registry Secret(s)
  shell: >-
    kubectl create secret docker-registry {{ item.REPO_URL.rpartition("//")[-1].partition("/")[0] }}
    --docker-server={{ item.REPO_URL }}
    --docker-username={{ item.REPO_USER }}
    --docker-password={{ item.REPO_PASS }}
    --dry-run=client -o json | kubectl apply -f -
  no_log: True
  loop: "{{ docker_logins }}"
  when: docker_logins is defined

- name: (Docker login) Create Docker Registry Secret Name List
  set_fact:
    secret_names: >-
      {
        "imagePullSecrets": [
        {% for item in docker_logins %}
          {"name": "{{ item.REPO_URL.rpartition('//')[-1].partition('/')[0] }}"}
          {{ ", " if not loop.last else "" }}
        {% endfor %}
        ]
      }
  no_log: True
  loop: "{{ docker_logins }}"
  when: docker_logins is defined

- name: (Docker login) Update Service Account with Registry Key Secret(s)
  shell: kubectl patch serviceaccount default -p '{{ secret_names | to_json | string }}'
  when: docker_logins is defined

