#cloud-config
manage_etc_hosts: false
package_upgrade: false

write_files:

- path: /tmp/wait-updates.sh
  permissions: '755'
  content: |
    #!/bin/bash

    while [[ `ps aufx | grep -v "grep" | grep "apt.systemd.daily" | wc -l` -gt 0 ]]; do
      sleep 1
    done

# This script fix the format of cert bundle, and split it into two separate files and copy them to the correct directory
# Occopus should do this.
- path: /tmp/run_split.sh
  permissions: '755'
  content: |
      #!/bin/bash
      /tmp/split_certs.sh $(< /tmp/tmp_certs)

# This script fix the format of cert bundle, and split it into two separate files and copy them to the correct directory
# Occopus should do this.
- path: /tmp/split_certs.sh
  permissions: '755'
  content: |
      #!/bin/bash
      while (( $# )); do if [[ $1 == -----* ]]; then while [[ $1 != *----- ]]; do printf "%s " $1; shift; done; fi; echo $1; shift; done | awk 'BEGIN { of="/etc/ipsec.d/private/node.key" } { print >of } /^-----END/ { of="/etc/ipsec.d/certs/node.crt" }'

# This script fix the format of CA, and copy it to the correct directory
# Occopus should do this.
- path: /tmp/modify_ca.sh
  permissions: '755'
  content: |
      #!/bin/bash
      fmt -w 35 /etc/ipsec.d/cacerts/master.pem |
      awk 'BEGIN { of="/etc/ipsec.d/cacerts/new_master.pem" } { print >of } /^-----END/'


- path: /etc/ipsec.conf
  content: |
    conn iptunnel
       type=transport
       compress=yes
       fragmentation=yes
       keyexchange=ikev2
       authby=pubkey
       leftcert=node.crt
       left=local
       right={{ ansible_default_ipv4.address }}
       rightid="CN=masternode.micado"
       auto=start

- path: /etc/ipsec.secrets
  content: | {% raw %}
    : RSA 'node.key'
    {% endraw %}

- path: /etc/ipsec.d/cacerts/master.pem
  content: | {% raw %}
      {{ '{{' }}cmd('cat /var/lib/micado/occopus/data/master.pem'){{ '}}' }}
    {% endraw %}

- path: /tmp/tmp_certs
  content: | {% raw %}
      {{ '{{' }}cmd('curl -X POST http://10.97.170.199:5003/v1.0/nodecerts'){{ '}}' }}
    {% endraw %}

packages:
- apt-transport-https
- ca-certificates
- curl
- software-properties-common

final_message: "MiCADO Worker configured after $UPTIME seconds"

runcmd:
{% if disable_worker_updates %}
  - sed -i 's/APT::Periodic::Unattended-Upgrade "1";/APT::Periodic::Unattended-Upgrade "0";/g' /etc/apt/apt.conf.d/20auto-upgrades
{% endif %}
  - export DEBIAN_FRONTEND=noninteractive
  - /tmp/wait-updates.sh
  - while [ -z $IP ]; do IP=`ip -oneline -4 addr show scope global | tr -s ' ' | tr '/' ' ' | grep -v dock | grep -v br- | cut -f 4 -d ' ' | sed 's/\./-/g'`; done
  - hostname={{ '{{ worker_name }}' }}-$IP
  - oldhostname=$(hostname -s)
  - sed -i "s/$oldhostname//g" /etc/hosts
  - sed -i "s/\b127.0.0.1 localhost/127.0.0.1 localhost\\t$hostname/g" /etc/hosts
  - hostnamectl set-hostname $hostname
  - dpkg-reconfigure openssh-server
  - echo nameserver 8.8.8.8 >> /etc/resolvconf/resolv.conf.d/head
  - resolvconf -u

  # Add K8s repositories
  - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - touch /etc/apt/sources.list.d/kubernetes.list
  - bash -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
  - apt-get update

  # Prepare system
  - modprobe overlay
  - modprobe br_netfilter
  - sysctl -w net.bridge.bridge-nf-call-iptables=1
  - sysctl -w net.bridge.bridge-nf-call-ip6tables=1
  - sysctl -w net.ipv4.ip_forward=1

  # Download containerd, runc, cni plugins
  - curl --connect-timeout 30 --retry 10 {{ packages.containerd.url }} --output /tmp/containerd.tar.gz
  - curl --connect-timeout 30 --retry 10 {{ packages.runc.url }} --output /tmp/runc.amd64
  - curl --connect-timeout 30 --retry 10 {{ packages.cni.url }} --output /tmp/cni-plugins.tgz

  # Install containerd
  - tar -xzf /tmp/containerd.tar.gz -C /usr/local
  - mkdir -p /etc/containerd
  - containerd config default > /etc/containerd/config.toml
  - sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml
  - sed -i 's/  sandbox_image = .*/  sandbox_image = "registry.k8s.io\/pause:3.2"/' /etc/containerd/config.toml
  - curl --connect-timeout 30 --retry 10 {{ packages.containerd.unit }} --output /usr/lib/systemd/system/containerd.service
  - systemctl daemon-reload
  - systemctl enable --now containerd

  # Install runc and cni plugins
  - install -m 755 /tmp/runc.amd64 /usr/local/sbin/runc
  - mkdir -p /opt/cni/bin
  - tar -xzf /tmp/cni-plugins.tgz -C /opt/cni/bin

  # Install K8s
  - swapoff -a
  - apt-get install -y kubelet={{ packages.kubernetes_version }} kubeadm={{ packages.kubernetes_version }} kubectl={{ packages.kubernetes_version }}
  - apt-mark hold kubelet kubeadm kubectl

  # Placeholder for ADT insert
  - echo micado runcmd placeholder

  # Auto-label k8s nodes
  - touch /etc/systemd/system/kubelet.service.d/20-labels.conf
  - echo '[Service]' >> /etc/systemd/system/kubelet.service.d/20-labels.conf
  - echo 'Environment="KUBELET_EXTRA_ARGS=--node-labels=micado.eu/node_type={{ '{{ worker_name }}' }}"' >> /etc/systemd/system/kubelet.service.d/20-labels.conf
  - systemctl daemon-reload

  # Install strongSwan
  - apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y strongswan
  - systemctl enable strongswan

  # Connect to cluster
  - {{ join_command.stdout }}

  # These removes the temporary scripts, certs
  - /tmp/run_split.sh
  - /tmp/modify_ca.sh
  - rm /etc/ipsec.d/cacerts/master.pem
  - mv /etc/ipsec.d/cacerts/new_master.pem /etc/ipsec.d/cacerts/master.pem
  - rm /tmp/split_certs.sh
  - rm /tmp/tmp_certs
  - rm /tmp/modify_ca.sh
  - rm /tmp/run_split.sh

  # Bring up the iptunnel
  - ipsec restart
