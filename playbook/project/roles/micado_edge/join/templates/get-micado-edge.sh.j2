#!/bin/sh

set -e

install_micado_edge() {
    # Check if running as root or sudo
    user="$(id -un 2>/dev/null || true)"
    sh_c='sh -c'
    if [ "$user" != 'root' ]; then
        if command -v sudo >/dev/null 2>&1; then
            sh_c='sudo -E sh -c'
        elif command -v su >/dev/null 2>&1; then
            sh_c='su -c'
        else
			cat >&2 <<-'EOF'
			Error: this installer needs the ability to run commands as root.
			We are unable to find either "sudo" or "su" available to make this happen.
			EOF
			exit 1
        fi
    fi

    containerd_version="1.7.8"
    runc_version="1.1.9"
    cni_plugins_version="1.3.0"
    kubeedge_version="1.15.0"
    token={{ hostvars['micado']['token_kubeedge']['stdout'] }}
    server={{ hostvars['micado']['ansible_host'] }}
    nodename={{ inventory_hostname|lower }}
    keversion={{ packages.kube_edge }}

    # Determine architecture
    architecture=$(uname -m)
    if [ "$architecture" = "x86_64" ]; then
        package_arch="amd64"
    elif [ "$architecture" = "armv6l" ]; then
        package_arch="armv6"
    elif [ "$architecture" = "armv7l" ]; then
        package_arch="armv7"
    elif [ "$architecture" = "aarch64" ]; then
        package_arch="arm64"
    else
        echo "Error: unsupported architecture $architecture" >&2
        exit 1
    fi

    # Check containerd
    containerd_not_running=0
    if command -v systemctl >/dev/null 2>&1; then
      containerd_status=$(systemctl is-active containerd || true)
      if [ "$containerd_status" != "active" ]; then
        containerd_not_running=1
      fi
    elif command -v service >/dev/null 2>&1; then
      containerd_status=$(service containerd status 2>/dev/null | grep -E "is running|running")
      if [ -z "$containerd_status" ]; then
        containerd_not_running=1
      fi
    fi

    if [ "$containerd_not_running" -eq 1 ]; then
      echo "apt/yum/dnf installing required packages (curl, gnupg2, ca-certificates)..."
      $sh_c 'if command -v apt-get >/dev/null 2>&1; then
          # Debian and Ubuntu
          export DEBIAN_FRONTEND=noninteractive
          apt-get -qq update
          apt-get -qq install -y curl gnupg2 ca-certificates
          
          # Add Docker official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          chmod a+r /etc/apt/keyrings/docker.gpg
          
          # Add Docker repository to Apt sources
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" > /etc/apt/sources.list.d/docker.list
          
          apt-get -qq update
          apt-get -qq install -y containerd.io
          
      elif command -v yum >/dev/null 2>&1; then
          # CentOS, RHEL
          yum makecache fast
          yum install -y -q curl gnupg2 yum-utils
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          yum install -y -q containerd.io
          
      elif command -v dnf >/dev/null 2>&1; then
          # Fedora
          dnf -y install dnf-plugins-core curl gnupg2
          dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
          dnf -y install containerd.io

      else
          echo "Error: unsupported package manager" >&2
          exit 1
      fi'

      echo "Installing cni plugins..."
      $sh_c "curl -fsSL -o cni-plugins-linux-$package_arch-v$cni_plugins_version.tgz https://github.com/containernetworking/plugins/releases/download/v$cni_plugins_version/cni-plugins-linux-$package_arch-v$cni_plugins_version.tgz"
      $sh_c "curl -fsSL -o cni-plugins.sha256 https://github.com/containernetworking/plugins/releases/download/v$cni_plugins_version/cni-plugins-linux-$package_arch-v$cni_plugins_version.tgz.sha256"
      echo "$(cat cni-plugins.sha256)" | sha256sum --check --status || (echo "Error: checksum verification failed for CNI plugins" >&2; exit 1)
      $sh_c "mkdir -p /opt/cni/bin && tar Cxzf /opt/cni/bin cni-plugins-linux-$package_arch-v$cni_plugins_version.tgz"
      $sh_c "rm -f cni-plugins-linux-$package_arch-v$cni_plugins_version.tgz cni-plugins.sha256"
      $sh_c "mkdir -p /etc/cni/net.d"
      $sh_c 'cat << EOF > /etc/cni/net.d/10-containerd-net.conflist
{
  "cniVersion": "1.0.0",
  "name": "containerd-net",
  "plugins": [
    {
      "type": "bridge",
      "bridge": "cni0",
      "isGateway": true,
      "ipMasq": true,
      "promiscMode": true,
      "ipam": {
        "type": "host-local",
        "ranges": [
          [{
            "subnet": "10.88.0.0/16"
          }],
          [{
            "subnet": "2001:db8:4860::/64"
          }]
        ],
        "routes": [
          { "dst": "0.0.0.0/0" },
          { "dst": "::/0" }
        ]
      }
    },
    {
      "type": "portmap",
      "capabilities": {"portMappings": true},
      "externalSetMarkChain": "KUBE-MARK-MASQ"
    }
  ]
}
EOF'

  fi

  $sh_c 'mkdir -p /etc/containerd && containerd config default > /etc/containerd/config.toml'
  if command -v systemctl >/dev/null 2>&1; then
      $sh_c 'systemctl daemon-reload && systemctl restart containerd'
  elif command -v service >/dev/null 2>&1; then
      $sh_c 'service containerd restart'
  fi
  echo "downloading edge connector (kubeedge)..."
  $sh_c "curl -fsSL -o keadm.tar.gz https://github.com/kubeedge/kubeedge/releases/download/v$kubeedge_version/keadm-v$kubeedge_version-linux-$package_arch.tar.gz"
  $sh_c "curl -fsSL -o keadm.sha512 https://github.com/kubeedge/kubeedge/releases/download/v$kubeedge_version/checksum_keadm-v$kubeedge_version-linux-$package_arch.tar.gz.txt"
  echo "$(cat keadm.sha512) keadm.tar.gz" | sha512sum --check --status || (echo "Error: checksum verification failed for KubeEdge" >&2; exit 1)
  $sh_c "tar Cxzf /tmp keadm.tar.gz"
  $sh_c "cp /tmp/keadm-v$kubeedge_version-linux-$package_arch/keadm/keadm /usr/local/bin/keadm"
  $sh_c "rm -f keadm.tar.gz keadm.sha512"
  $sh_c "rm -rf /etc/kubeedge"

  echo "join cluster"
  $sh_c "keadm reset --force || echo 'Attempted Reset'"
  if command -v systemctl >/dev/null 2>&1; then
      $sh_c 'systemctl stop edgecore || echo "Edgecore not running"'
  elif command -v service >/dev/null 2>&1; then
      $sh_c 'service edgecore stop || echo "Edgecore not running"'
  fi
  $sh_c "keadm join --cloudcore-ipport=$server:10000 --edgenode-name=$nodename --kubeedge-version=$kubeedge_version --token=$token"

  echo "configuring kubeedge..."
  $sh_c "sed -i 's/            SystemdCgroup = false/            SystemdCgroup = true/' /etc/containerd/config.toml"
  $sh_c "sed -i -e 's|cgroupDriver: .*|cgroupDriver: systemd|g' /etc/kubeedge/config/edgecore.yaml"
  $sh_c "sed -i -e '/edgeStream:/,/^ *[^ ]/ {s/\(enable: \)false/\1true/;}' /etc/kubeedge/config/edgecore.yaml" 
  $sh_c "sed -i -e '/metaServer:/,/^ *[^ ]/ {s/\(enable: \)false/\1true/;}' /etc/kubeedge/config/edgecore.yaml" 

  $sh_c "systemctl restart containerd"
  $sh_c "systemctl restart edgecore"
}

install_micado_edge